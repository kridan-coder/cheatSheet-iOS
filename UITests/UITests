app.alerts.element
app.buttons.element
app.collectionViews.element
app.images.element
app.maps.element
app.navigationBars.element
app.pickers.element
app.progressIndicators.element
app.scrollViews.element
app.segmentedControls.element
app.staticTexts.element
app.switches.element
app.tabBars.element
app.tables.element
app.textFields.element
app.textViews.element
app.webViews.element


You can then find it like this:

app.staticTexts["Help"]

Some of those seem similar, so let me clarify a few things:


If you use element to read precisely one element, and there is more than one matching element (e.g. several buttons) your test will fail.
firstMatch will return the first item that matches your query, even if you have more than one matching element.
On the plus side, this makes firstMatch significantly faster than element because it won’t check for duplicates. On the down side, using firstMatch won’t warn you of accidental duplicates.
children(matching:) only reads immediate subviews, whereas descdendant(matching:) reads all subviews and subviews of subviews.
For that reason, children(matching:) is significantly more efficient than descdendant(matching:).

Interacting with elements
XCTest gives us five different ways to trigger taps on elements:

tap() triggers a standard tap, which will trigger buttons or active text fields for editing.
doubleTap() taps twice in quick succession.
twoFingerTap() uses two fingers to tap once on an element.
tap(withNumberOfTaps:numberOfTouches:) lets you control tap and touch count at the same time.
press(forDuration:) triggers long presses over a set number of seconds.
There are also specific methods for gesture control:

swipeLeft(), swipeRight(), swipeUp(), and swipeDown() execute single swipes in a specific direction, although there is no control over speed or distance.
pinch(withScale:velocity:) pinches and zooms on something like a map. Specify scales between 0 and 1 to zoom out, or scales greater than 1 to zoom in. Velocity is specified as “scale factor per second” and causes a little overscroll after you zoom – use 0 to make the zoom precise.
rotate(_: withVelocity:) rotates around an element. The first parameter is a CGFloat specifying an angle in radians, and the second is radians per second.

Typing text
You can activate a text field and type individual letters in the keyboard:

app.textFields.element.tap()
app.keys["t"].tap()
app.keys["e"].tap()
app.keys["s"].tap()
app.keys["t"].tap()
Alternatively, you can select and type whole strings like this:

app.textFields.element.typeText("test")   

commitPredicate = NSPredicate(format: "message == 'I fixed a bug in Swift'")
